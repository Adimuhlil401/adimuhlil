#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <json-c/json.h>
#include <time.h>

#define LOG_FILE "/var/ossec/logs/active-responses.log"
#define ADD_COMMAND 0
#define DELETE_COMMAND 1
#define CONTINUE_COMMAND 2
#define ABORT_COMMAND 3
#define OS_SUCCESS 0
#define OS_INVALID -1

typedef struct {
    char alert[1024];
    int command;
} message_t;

void write_debug_file(const char *ar_name, const char *msg) {
    FILE *log_file = fopen(LOG_FILE, "a");
    if (log_file == NULL) {
        perror("fopen");
        return;
    }
    time_t now = time(NULL);
    struct tm *tm = localtime(&now);
    char timestamp[32];
    strftime(timestamp, sizeof(timestamp), "%Y/%m/%d %H:%M:%S", tm);
    fprintf(log_file, "%s %s: %s\n", timestamp, ar_name, msg);
    fclose(log_file);
}

message_t setup_and_check_message(int argc, char **argv) {
    message_t msg;
    char input_str[1024];
    fgets(input_str, sizeof(input_str), stdin);
    write_debug_file(argv[0], input_str);

    json_object *data = json_tokener_parse(input_str);
    if (data == NULL) {
        write_debug_file(argv[0], "Decoding JSON has failed, invalid input format");        msg.command = OS_INVALID;
        return msg;
    }

    json_object *command_obj = json_object_object_get(data, "command");
    if (command_obj == NULL) {
        write_debug_file(argv[0], "Not valid command");
        msg.command = OS_INVALID;
        return msg;
    }

    const char *command_str = json_object_get_string(command_obj);
    if (strcmp(command_str, "add") == 0) {
        msg.command = ADD_COMMAND;
    } else if (strcmp(command_str, "delete") == 0) {
        msg.command = DELETE_COMMAND;
    } else {
        write_debug_file(argv[0], "Not valid command");
        msg.command = OS_INVALID;
        return msg;
    }

    return msg;
}

void run_bash_script(const char *script_path) {
    char cmd[1024];
    sprintf(cmd, "chmod +x %s && bash %s", script_path, script_path);
    FILE *fp = popen(cmd, "r");
    if (fp == NULL) {
        perror("popen");
        return;
    }
    char buffer[1024];
    while (fgets(buffer, sizeof(buffer), fp) != NULL) {
        write_debug_file("active-response", buffer);
    }
    pclose(fp);
}

int main(int argc, char **argv) {
    write_debug_file(argv[0], "Started");

    message_t msg = setup_and_check_message(argc, argv);

    if (msg.command < 0) {
        return OS_INVALID;
    }

    if (msg.command == ADD_COMMAND) {
        const char *script_path = "/var/ossec/etc/shared/trigger_wazuh.sh";
        run_bash_script(script_path);
    } else {
        write_debug_file(argv[0], "Invalid command");
    }

    write_debug_file(argv[0], "Ended");
    return OS_SUCCESS;
}
